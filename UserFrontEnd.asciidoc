Building the User UI using HTML5
================================
Marius Bogoevici <mariusb@redhat.com>
April 2012

You've just implemented the business services of your application, and exposed them through RESTful endpoints. Now you need to implement a flexible user interface that can be easily used with both desktop and mobile clients. After reading this tutorial, you will understand our front-end design and the choices that we made in its implementation. Topics covered include:

* Creating single-page applications using HTML5, JavaScript and JSON
* Using JavaScript frameworks such as jQuery for invoking RESTful endpoints and manipulating page content
* Feature and device detection
* Implementing a version of the user interface that is optimized for mobile clients using JavaScript frameworks such as jQuery mobile

The tutorial will show you how to perform all these steps in JBoss Developer Studio, including screenshots that guide you through. For those of you who prefer to watch and learn, the included video shows you how we performed all the steps.


First, the basics
-----------------

In this tutorial, you will build a single-page application. All the necessary code: HTML, CSS and JavaScript is retrieved within a single page load. Rather than refreshing the page every time the user changes a view, the content of the page will be redrawn by manipulating the DOM in JavaScript. The application uses REST calls to retrieve data from the server.

[[single-page-app_image]]
.Single page application
image::gfx/single-page-app.png[]

You will use jQuery to simplify DOM manipulation. Because this is a moderately complex example, which involves multiple views and different types of data, you will use a client-side MVC framework to structure your application, which provides amongst others:

* routing support within your single page application;
* event-driven interaction between views and data;
* simplified CRUD invocations on RESTful services.

You will build two variants of the single-page-application: one for the desktop and one for mobile clients. This is because the page flow and structure, as well as feature set are slightly different in each case. 

For the mobile component of your application, you will use jQuery Mobile. jQuery Mobile adds to your application support for mobile look and feel (layout, transitions), as well as mobile-device specific interaction (for example tap and slide).

Both the desktop and mobile variant of the application use backbone.js to structure the application. The general architecture is shown in figure ... 

[[use-of-backbone_image]]
.Backbone interaction in Ticket Monster
image::gfx/backbone-usage.png[]

Ticket Monster defines a number of Backbone components. 

Models hold data, handle data change events and can perform CRUD operations with the REST service. For example nearly each domain entity is represented in the UI by a corresponding Backbone model. Collections are implementing for handling groups of models.

Views are responsible for rendering the UI by manipulating the DOM, handling user interaction events like selection changes or button clicks.

The router executes actions in response to a hashchange(equivalent to the user navigating to a different page inside the application).

Creating the desktop page
-------------------------

TBD: Create HTML, add JavaScript dependencies and CSS. 

Isolating our own code
----------------------

You want to make sure that your code doesn't clash with other Javascript libraries. You need to declare a 'namespace'.

.src/main/webapp/desktop-index.html
[source,html]
-------------------------------------------------------------------------------------------------------

var TicketMonster = new Object();

------------------------------------------------------------------------------------------------------- 

Viewing the events
------------------

You will begin implementing the view by adding the model for the Event entity and its associated collection.

.src/main/webapp/desktop-index.html
[source,html]
-------------------------------------------------------------------------------------------------------

TicketMonster.Event = Backbone.Model.extend({
    urlRoot:'rest/events'
})

TicketMonster.Events = Backbone.Collection.extend({
    url:"rest/events",
    model:TicketMonster.Event,
    id:"id",
    comparator:function (model) {
        return model.get('category').id;
    }
});

-------------------------------------------------------------------------------------------------------

The `urlRoot` property of `TicketMonster.Event` maps the CRUD operations of the entity to the REST service layer. Same goes for the `url` property of `TicketMonster.Events`. We have also indicated which is the identifier property of the Event model, and that the Events collection must sort its members by id internally.

By mapping the model and collection to a REST endpoint you can perform CRUD operations without having to invoke the services explicitly. You will see how that works a bit later.

